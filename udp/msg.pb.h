// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class Msg;

// ===================================================================

class Msg : public ::google::protobuf::Message {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  Msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline ::google::protobuf::int32 header() const;
  inline void set_header(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string reserved = 4;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 4;
  inline const ::std::string& reserved() const;
  inline void set_reserved(const ::std::string& value);
  inline void set_reserved(const char* value);
  inline void set_reserved(const char* value, size_t size);
  inline ::std::string* mutable_reserved();
  inline ::std::string* release_reserved();
  inline void set_allocated_reserved(::std::string* reserved);

  // @@protoc_insertion_point(class_scope:msg.Msg)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_reserved();
  inline void clear_has_reserved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 header_;
  ::google::protobuf::int32 id_;
  ::std::string* message_;
  ::std::string* reserved_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static Msg* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg

// required int32 header = 1;
inline bool Msg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg::clear_header() {
  header_ = 0;
  clear_has_header();
}
inline ::google::protobuf::int32 Msg::header() const {
  return header_;
}
inline void Msg::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
}

// required int32 id = 2;
inline bool Msg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Msg::id() const {
  return id_;
}
inline void Msg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string message = 3;
inline bool Msg::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Msg::message() const {
  return *message_;
}
inline void Msg::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Msg::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Msg::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Msg::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reserved = 4;
inline bool Msg::has_reserved() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg::set_has_reserved() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg::clear_reserved() {
  if (reserved_ != &::google::protobuf::internal::kEmptyString) {
    reserved_->clear();
  }
  clear_has_reserved();
}
inline const ::std::string& Msg::reserved() const {
  return *reserved_;
}
inline void Msg::set_reserved(const ::std::string& value) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(value);
}
inline void Msg::set_reserved(const char* value) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(value);
}
inline void Msg::set_reserved(const char* value, size_t size) {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  reserved_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg::mutable_reserved() {
  set_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    reserved_ = new ::std::string;
  }
  return reserved_;
}
inline ::std::string* Msg::release_reserved() {
  clear_has_reserved();
  if (reserved_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reserved_;
    reserved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg::set_allocated_reserved(::std::string* reserved) {
  if (reserved_ != &::google::protobuf::internal::kEmptyString) {
    delete reserved_;
  }
  if (reserved) {
    set_has_reserved();
    reserved_ = reserved;
  } else {
    clear_has_reserved();
    reserved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
